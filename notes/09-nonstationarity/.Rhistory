summarize(Mean = mean(coef), `Std. Dev.` = sd(coef))
sim_df %>%
filter(model != "OLS Hom.") %>%
group_by(model) %>%
summarize(Mean = mean(coef), "Std. Dev." = sd(coef))
sim_df %>%
filter(model != "OLS Hom.") %>%
group_by(model) %>%
summarize(Mean = mean(coef), "Std. Dev." = sd(coef)) %>% kable
sim_df %>%
filter(model != "OLS Hom.") %>%
group_by(model) %>%
summarize(Mean = mean(coef) %>% round(3), "Std. Dev." = sd(coef))
sim_df %>%
filter(model != "OLS Hom.") %>%
group_by(model) %>%
summarize(Mean = mean(coef) %>% round(4), "Std. Dev." = sd(coef) %>% round(4))
sim_df %>%
filter(model != "OLS Hom.") %>%
group_by(model) %>%
summarize(Mean = mean(coef) %>% round(4), "Std. Dev." = sd(coef) %>% round(4)) %>%
kable()
sim_df %>%
filter(model != "OLS Hom.") %>%
group_by(model) %>%
summarize(Mean = mean(coef) %>% round(3), "Std. Dev." = sd(coef) %>% round(3)) %>%
kable()
relevel()
?relevel()
?fct_recode
?dplyr::recode()
sim_df %>%
filter(model != "OLS Hom.") %>%
mutate(Estimator = recode(`OLS Hom.` = "OLS")) %>%
group_by(Estimator) %>%
summarize(Mean = mean(coef) %>% round(3), "Std. Dev." = sd(coef) %>% round(3)) %>%
kable()
sim_df %>%
filter(model != "OLS Hom.") %>%
mutate(Estimator = recode(`OLS Hom.` = "OLS"))
sim_df %>%
filter(model != "OLS Hom.") %>%
mutate(Estimator = recode(model, `OLS Hom.` = "OLS")) %>%
group_by(Estimator) %>%
summarize(Mean = mean(coef) %>% round(3), "Std. Dev." = sd(coef) %>% round(3)) %>%
kable()
sim_df %>%
filter(model != "OLS Hom.")
sim_df %>%
filter(model != "OLS Hom.") %>%
mutate(Estimator = recode(model, `OLS Hom.` = "OLS"))
sim_df %>%
filter(model != "OLS Hom.") %>%
mutate(Estimator = recode(model, `OLS Hom.` = "OLS"))
sim_df %>%
filter(model != "OLS Hom.") %>%
mutate(Estimator = recode(model, "OLS Hom." = "OLS")) %>%
group_by(Estimator) %>%
summarize(Mean = mean(coef) %>% round(3), "Std. Dev." = sd(coef) %>% round(3)) %>%
kable()
sim_df %>%
filter(model != "OLS Hom.") %>%
mutate(Estimator = recode(model, "OLS Het." = "OLS")) %>%
group_by(Estimator) %>%
summarize(Mean = mean(coef) %>% round(3), "Std. Dev." = sd(coef) %>% round(3)) %>%
kable()
sim_df %>%
filter(model != "OLS Hom.") %>%
mutate(Estimator = recode(model,
"OLS Het." = "OLS",
"WLS F" = "WLS Incorrect",
"WLS T" = "WLS Correct"
)) %>%
group_by(Estimator) %>%
summarize(Mean = mean(coef) %>% round(3), "Std. Dev." = sd(coef) %>% round(3)) %>%
kable()
sim_df
lm(test_score ~ income, test_df) %>% summary
lm(test_score ~ ratio, test_df) %>% summary
lm(test_score ~ log(ratio), test_df) %>% summary
lm(test_score ~ log(ratio/3), test_df) %>% summary
lm(test_score ~ log(ratio^2), test_df) %>% summary
lm(test_score ~ log(ratio^10), test_df) %>% summary
lm(test_score ~ I(ratio^10), test_df) %>% summary
lm(test_score ~ I(ratio^-(10)), test_df) %>% summary
lm(test_score ~ I(ratio^(10)/1e10), test_df) %>% summary
lm(test_score ~ I(ratio^(10)/1e14), test_df) %>% summary
lm(test_score ~ I(ratio^(10)/1e14), head(test_df, 30)) %>% summary
2 * pt(-0.635, df = 28)
2 * pt(-0.635, df = 27)
?summary.lm
?theme
?unit
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
2 + 2
install.packages("gplot2")
install.packages("gplots")
gplots::col2hex("orange")
gplots::col2hex("orange")
xaringan:::inf_mr()
seq(lb, ub, 0.01)
ggplot(data = tibble(x = seq(lb, ub, 0.01), aes(x)) +
geom_area(
stat = "function", fun = dnorm, args = list(mean = ex1, sd = se1),
fill = "orange", alpha = 0.7
)
ggplot(data = tibble(x = seq(lb, ub, 0.01), aes(x)) +
geom_area(
stat = "function", fun = dnorm, args = list(mean = ex1, sd = se1),
fill = "orange", alpha = 0.7
)
ggplot(data = tibble(x = seq(lb, ub, 0.01)), aes(x)) +
geom_area(
stat = "function", fun = dnorm, args = list(mean = ex1, sd = se1),
fill = "orange", alpha = 0.7
)
xaringan:::inf_mr()
lb
ub
mu * 1/(2+1)
gplots::col2hex("orange")
gplots::col2hex(plasma(7, end = 0.9, direction = -1))
gplots::col2hex(plasma(7, end = 0.9, direction = -1))
View(Ecdat::Caschool)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
library(lwgeom)
st_geohash
?CPL_geohash
??CPL_geohash
pchisq(3, 3, lower.tail = T)
pchisq(3, 3, lower.tail = F)
pchisq(3, 3)
pchisq(3, 3, lower.tail = F)
setwd("Dropbox/Websites/edrubin.github.io/")
rmarkdown::render_site()
rmarkdown::render_site("teaching.Rmd")
rmarkdown::render_site("teaching.Rmd")
setwd()
setwd("!")
setwd("~")
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
here()
?here
dir()
dir_slides
dir_slides %>% dir
birth_df
birth_df$Month %>% table
birth_df$YearReg %>% class
birth_df$YearReg %>% head
birth_df
birth_df
birth_df %>% tail
birth_df
months
month.name
month.abb
ggplot(data = birth_df %>% filter(Year < 2050),
aes(x = Year, y = factor(as.numeric(Month), labels = month.abb)
) +
geom_tile(color = red_pink) +
theme_pander(base_family = "Fira Sans Book", base_size = 20)
ggplot(data = birth_df %>% filter(Year < 2050),
aes(x = Year, y = factor(as.numeric(Month), labels = month.abb))
) +
geom_tile(color = red_pink) +
theme_pander(base_family = "Fira Sans Book", base_size = 20)
ggplot(data = birth_df %>% filter(Year < 2050),
aes(x = Year, y = factor(as.numeric(Month), labels = month.abb), fill = Births)
) +
geom_tile(color = red_pink) +
theme_pander(base_family = "Fira Sans Book", base_size = 20)
ggplot(data = birth_df %>% filter(Year < 2050),
aes(x = Year, y = factor(as.numeric(Month), labels = month.abb), fill = Births)
) +
geom_tile(color = red_pink) +
theme_pander(base_family = "Fira Sans Book", base_size = 20) +
scale_fill_viridis(option = "magma")
months.Date()
?theme
?unit
dir()
days_df
days_lon <- gather(days_df, year, n_days, -Month)
days_lon <- janitor::clean_names(days_lon)
install.packages('janitor')
days_lon <- gather(days_df, year, n_days, -Month)
days_lon <- janitor::clean_names(days_lon)
days_lon$year <- as.integer(days_lon$year)
days_lon
clean_names(birth_df)
janitor::clean_names(birth_df)
xaringan:::inf_mr()
birth_df
days_lon
birth_df <- left_join(
x = birth_df,
y = days_lon,
by = c("year", "month")
)
birht_df
birht_df
birth_df
birth_df
?theme
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
mobility
fake_data <- data.frame(x = 1:100, y = 1:100)
xaringan:::inf_mr()
mobility_df
xaringan:::inf_mr()
reg_2h %>% summary(robust = T)
lm_2c %>% summary
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
?arima.sim()
ar1_p
warnings()
u <- lapply(X = 1:T, FUN = function(x) {
if (x == 1) {
rho * start + ar1_p$e[x]
} else {
rho * ar1_p$u[x-1] + ar1_p$e[x]
}
}) %>% unlist()
u
ar1_p
u
u
ar1_p
u
u %>% length
ar1_p
ar1_p$u
u
u %>% length()
ar1_p$u <- u
ar1_p
ar1_p
rm(rr1_p)
rm(ar1_p)
arp_df
arp_df
arp_df
warnings()
T <- 1e2
rho <- 0.8
set.seed(1234)
start <- rnorm(1)
arp_df <- tibble(
t = 1:T,
e = rnorm(T)
)
arp_df
u <- lapply(X = 1:T, FUN = function(x) {
if (x == 1) {
u_x <- rho * start + arp_df$e[x]
} else {
u_x <- rho * arp_df$u[x-1] + arp_df$e[x]
}
return(u_x)
}) %>% unlist()
warnings()
for (x in 1:T) print(x)
ar_df
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
b2
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
rm(list = ls())
sim_df
sim_df
sim_df
sim_df
sim_df
reg_resid %>% summary
tidy(reg_resid)
?lag
reg_ar3
reg_ar3 %>% summary
reg_ar3
summary(reg_ar3)$r.squared
ar_df
birth_df
ls()
xaringan:::inf_mr()
pf(1.6667, df1 = 99, df2 = 99)
pf(1.6667, df1 = 99, df2 = 99, lower.tail = F)
1 - pf(1.6667, df1 = 99, df2 = 99)
pf(1.6667, df1 = 99, df2 = 99, lower.tail = F)
pf(1.6667, df1 = 98, df2 = 98, lower.tail = F)
pf(1.666666666667, df1 = 98, df2 = 98, lower.tail = F)
pf(1.7, df1 = 98, df2 = 98, lower.tail = F)
pf(1.67, df1 = 98, df2 = 98, lower.tail = F)
log(exp(3))
library(dplyr)
starwars
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
pt(2.4, 100, lower.tail = F) * 2
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
birth_df
birth_df
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
?here
xaringan:::inf_mr()
xaringan:::inf_mr()
lm(midterm ~ ps1, grades_df) %>% summary
lm(midterm ~ ps1, grades_df %>% filter(ps1 > 50)) %>% summary
readRDS("sim.rds")
test <- arima.sim(model = list(ar = 0.9), n = 100)
test
test <- arima.sim(model = list(ar = 0.9), n = 100) %>% unlist()
test
test <- arima.sim(model = list(ar = 0.9), n = 100) %>% unclass
test
test <- arima.sim(model = list(ar = 0.9), n = 100) %>% as.numeric
test
head(1:10, -1)
tail(1:10, -1)
cor(tail(test, -1), lag(test))
lag(test)
cor(tail(test, -1), tail(lag(test), -1))
getwd()
getwd()
warnings()
getwd()
setwd("~/Dropbox/UO/Teaching/EC421W19/LectureNotes/08Autocorrelation/")
dir()
tmp <- readRDS("sim.rds")
tmp %>% head
readRDS("sim.rds") %>% filter(term == "lag(y2)") %>% select(estimate)
readRDS("sim.rds") %>% filter(term == "lag(y2)") %>% select(estimate) %>% mean
readRDS("sim.rds") %>% filter(term == "lag(y2)") %>% select(estimate) %>% mean(na.rm = T)
readRDS("sim.rds") %>% filter(term == "lag(y2)") %>% select(estimate) %>% unlist %>% mean(na.rm = T)
xaringan:::inf_mr()
pagedown::chrome_print("09-nonstationarity.html", "09-nonstationarity.pdf")
dir()
her()
here::here()
xaringan::inf_mr("09-nonstationarity.Rmd")
pagedown::chrome_print(
input = "09-nonstationarity.html",
timeout = 60
)
xaringan::inf_mr("09-nonstationarity.Rmd")
pagedown::chrome_print(
input = "09-nonstationarity.html",
timeout = 60
)
xaringan::inf_mr('09-nonstationarity.Rmd')
pagedown::chrome_print(
input = "09-nonstationarity.html",
timeout = 60
)
combn(1:10, 3)
combn(1:10, 10)
combn(1:10, 8)
combn(1:10, 8, simplify = F)
combn(1:10, 8, simplify = F)
# Load packages
library(pacman)
p_load(data.table, magrittr)
# Load 'gapminder' for dataset
p_load(gapminder)
gapminder
gap_dt = gapminder
setDT(gap_dt)
gap_dt
setkey(gap_dt, country, year)
gapdt
gap_dt
gap_dt$country %>% uniqueN()
countries = gap_dt[,unique(country)]
countries
combn
all_combos = combn(
x = countries,
m = k,
SIMPLIFY = FALSE
)
k = 100
countries = gap_dt[,unique(country)]
all_combos = combn(
x = countries,
m = k,
SIMPLIFY = FALSE
)
all_combos = combn(
x = countries,
m = k
)
countries
combn(x = countries, m = 2)
combn(x = countries, m = 1e3)
combn(x = countries, m = 141)
combn(x = countries, m = 10)
combn(x = countries, m = 100)
p_load(data.table, Rfast, magrittr)
comb_n(n = 12, k = 3)
comb_n(n = letters, k = 3)
all_combos = comb_n(
n = seq_along(countries),
k = k,
SIMPLIFY = FALSE
)
all_combos = comb_n(
n = seq_along(countries),
k = k,
simplify = FALSE
)
choose(142, 100)
# Load packages
library(pacman)
p_load(data.table, RcppAlgos, magrittr)
p_load(gapminder)
gap_dt = gapminder
setDT(gap_dt)
# Key the dataset on its two panel dimensions
setkey(gap_dt, country, year)
?comboSample()
countries = gap_dt[,unique(country)]
some_combos = comboSample(
v = countries,
m = 100,
n = 1000,
repetition = FALSE,
seed = 224
)
some_combos
some_combos %>% dim
some_combos %>% [1,]
some_combos[1,]
some_combos[,1000]
some_combos[,1]
some_combos[,1000]
?comboSample()
?I
i(1)
identity(1)
some_combos = comboSample(
v = countries,
m = 100,
n = 1000,
repetition = FALSE,
seed = 224,
FUN = identity
)
some_combos %>% class
some_combos %>% head
some_combos = comboSample(
v = countries,
m = 100,
n = 1000,
repetition = FALSE,
seed = 224
)
some_combos
p_load(data.table, RcppAlgos, parallel, magrittr)
some_combos
some_combos %>% dim
p_load(data.table, fixest, RcppAlgos, parallel, magrittr)
i_dt = gap_dt[country %in% some_combos[i,]]
i = 1
i_dt = gap_dt[country %in% some_combos[i,]]
i_dt
i_dt %>% dim
gap_dt %>% dim
some_combos[1,] %>% uniqueN
broom::tidy(i_reg, ci = TRUE)
i_reg = feols(lifeExp ~ gdpPercap, data = i_dt, vcov = 'hetero')
broom::tidy(i_reg, ci = TRUE)
?broom::tidy()
broom::tidy(i_reg, conf.int = TRUE)
broom::tidy(i_reg, conf.int = TRUE)[2,] %>% as.data.table()
sim_dt = mclapply(
X = 1:nrow(some_combos),
mc.cores = 8,
FUN = function(i) {
# Grab subset of data
# NOTE: Could just do this step in the 'data' argument of the regression
i_dt = gap_dt[country %in% some_combos[i,]]
# Estimate
i_reg = feols(lifeExp ~ gdpPercap, data = i_dt, vcov = 'hetero')
# Return a data table of results for coefficient on GDP pc
broom::tidy(i_reg, conf.int = TRUE)[2,] %>% as.data.table()
}
) %>% rbindlist()
sim_dt
