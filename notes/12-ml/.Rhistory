grad = runif(n, min = female/3, max = 1) %>% round(0),
wage = 100 - 25 * female + 5 * grad + rnorm(n, sd = 10)
)
lm(wage ~ grad, data = ex_df) %>% tidy()
# Plot
ggplot(
data = ex_df %>% mutate(Gender = factor(female, labels = c("Female", "Male"))),
aes(x = grad, y = wage)
) +
geom_jitter(alpha = 0.3) +
geom_smooth(method = lm, se = F) +
xlab("Graduate") +
ylab("Wage") +
theme_pander(base_family = "Fira Sans Book", base_size = 18)
xaringan:::inf_mr()
xaringan:::inf_mr()
c(rep("0.007", 3), "0.009", "0.010") %>% paste0("[", ., "]")
coef_v <- c("0.132", "0.131", "0.114", "0.087", "0.066")
se_v <- c(rep("0.007", 3), "0.009", "0.010") %>% paste0("(", ., ")")
matrix(c(coef_v, se_v), nrow = 2, byrow = T)
?kable
xaringan:::inf_mr()
xaringan:::inf_mr()
set.seed(12345)
tmp <- runif(7, -2, 2)
set.seed(12345)
runif(7, -2, 2)
runif(6, -2, 2)
set.seed(12345); runif(6, -2, 2)
set.seed(1234); runif(6, -2, 2)
set.seed(1234); runif(7, -2, 2)
e
?geom_segment()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
library(tidyverse)
tmp <- tibble(x = rnorm(100), y = 3 + 1 * x + rnorm(100))
tmp
reg <- lm(y ~ x, data = tmp)
summary(reg)
dim(tmp)
summary(reg) %>% names()
pchisq(0, df = 2)
pchisq(0, df = 2, lower.tail = F)
pchisq(15.76, df = 2, lower.tail = F)
tmp <- tibble(x = rnorm(100), z = rnorm(100), y = 3 + 1 * x + z + rnorm(100))
tmp
lm(y ~ x + z + I(x * y) + I(x^2) + I(y^2), data = tmp)
library(swirl)
swirl()
swirl()
install_course("R Programming")
swirl()
my_vector <- 1:20
my_vector
summary(reg)
xaringan:::inf_mr()
library(pacman)
p_load(dplyr, swirl)
swirl()
set.seed(12345)
rnorm(3)
rnorm(3)
set.seed(12345)
rnorm(3)
rnorm(3)
data.frame(x = 1:100)
tibble(x = 1:100)
source('~/.active-rstudio-document', echo=TRUE)
tmp
set.seed(12345)
tmp <- tibble(
x = rnorm(100, mean = 3, sd = 10),
e = rnorm(100),
y = 10 + 3 * x + e
)
tmp
our_reg <- lm(y ~ x, data = tmp)
our_reg
our_reg %>% summary
our_reg %>% summary()
our_reg %>% summary()
our_reg
our_reg %>% summary()
summary(our_reg)
our_reg %>% summary() %>% coef()
our_reg %>% summary()
our_reg %>% summary()
xaringan:::inf_mr()
tmp <- tibble(x = rnorm(100), y = x + rnorm(100))
tmp
lm(y ~ x, tmp)
cov(tmp$y, tmp$x)
cov(tmp$y, tmp$x)/var(tmp$x)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
load('RDReplication.rdata')
ls()
x
x %>% dim
x %>% names
View(x)
?load
ls()
dir()
View(x[16,])
View(x)
filter(x, CngrsNum == 47)
filter(x, CngrsNum == 74)
filter(x, CngrsNum == 74) %>% View
x$DemWin %>% table
x$DemWin %>% table(useNA = T)
x$DemWin %>% table(useNA = is.na)
?table
x$DemWin %>% table(useNA = "a")
rd_df
rd_df
x
load("RDReplication.rdata")
rd_df <- x %>% select(
state = StPOAbrv,
district = CngrsNum,
year = YearElec,
dem_margin = DPctPrv,
dem_margin_lag = DifDPPrv,
dem_margin_lead = DifDPNxt,
dem_vote = DemPct,
dem_vote_lag = DPctPrv,
dem_vote_lead = DemPct,
dem_win = DemWin,
dem_win_lag = DWinPrv,
dem_win_lead = DWinNxt
) %>% tibble()
rd_df
rd_df$.
load("RDReplication.rdata")
x
x %>% class
rd_df
rd_df %>% head
logistic
0 / (1 + 0)
1 / (1 + 1)
y0 <- function(x) 0.9 / (1 + exp(-x))
y0
y0(1)
y0(0)
y0(-1)
y0(-1)
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
rd_df
rd_df
between
srd_df <- tibble(
x = seq(-1, 1, 0.02),
y = (x < 0) * y0(x) + (x >= 0) * y1(x) + rnorm(length(x), sd = 0.07),
y = between(y, 0, 1) * y + (y < 0) * 0 + (y > 1) * 1
)
lm_s6 <- lm(y ~ x + I(x>0), data = srd_df)
lm_s6
coefficients(lm_s6)[0]
coefficients(lm_s6)
coefficients(lm_s6) %>% class
coefficients(lm_s6)[1]
lm_s6
s7
lm_sy7
lm_s7
predict(lm_s7, 0)
predict(lm_s7, data.frame(x = 0))
predict(lm_s7, data.frame(x = -0.01))
predict(lm_s7, data.frame(x = 0.01))
xaringan:::inf_mr()
lm_fun
lm_tmp
?loess
lm_tmp <- loess(y ~ x * I(x>0), data = srd_df %>% filter(abs(x) < 0.5))
rd_df
null_srd <- tibble(
x = seq(-1, 1, 0.02),
y = 0.95 / (1 + exp(-7 * x))
) %>% filter(x != 0)
null_srd
null_srd <- tibble(
x = seq(-1, 1, 0.02),
y = 0.95 / (1 + exp(-7 * x)) + rnorm(length(x), sd = 0.07)
) %>% filter(x != 0)
null_srd
ggplot() +
geom_vline(xintercept = 0, color = slate, size = 1, alpha = 0.1) +
stat_function(
data = data.frame(x = c(-1,1)), aes(x),
fun = y0, color = slate, size = 1, alpha = 0.15,
linetype = "solid",
xlim = c(-1,1)
)
null <- function(x) 0.95 / (1 + exp(-7 * x))
null_srd <- tibble(
x = seq(-1, 1, 0.02),
y = null(x) + rnorm(length(x), sd = 0.07)
) %>% filter(x != 0)
# Estimate models
lm_tmp <- lm(y ~ x + I(x>0), data = null_srd)
lm_fun <- function(x) predict(lm_tmp, data.frame(x = x))
loess_tmp <- loess(y ~ x * I(x>0), data = null_srd)
loess_fun <- function(x) predict(loes_tmp, data.frame(x = x))
# Figure
ggplot() +
geom_vline(xintercept = 0, color = slate, size = 1, alpha = 0.1) +
stat_function(
data = data.frame(x = c(-1,1)), aes(x),
fun = null, color = slate, size = 1, alpha = 0.15,
linetype = "solid",
xlim = c(-1,1)
)
null <- function(x) 0.95 / (1 + exp(-5 * x))
null_srd <- tibble(
x = seq(-1, 1, 0.02),
y = null(x) + rnorm(length(x), sd = 0.07)
) %>% filter(x != 0)
# Estimate models
lm_tmp <- lm(y ~ x + I(x>0), data = null_srd)
lm_fun <- function(x) predict(lm_tmp, data.frame(x = x))
loess_tmp <- loess(y ~ x * I(x>0), data = null_srd)
loess_fun <- function(x) predict(loes_tmp, data.frame(x = x))
# Figure
ggplot() +
geom_vline(xintercept = 0, color = slate, size = 1, alpha = 0.1) +
stat_function(
data = data.frame(x = c(-1,1)), aes(x),
fun = null, color = slate, size = 1, alpha = 0.15,
linetype = "solid",
xlim = c(-1,1)
)
xaringan:::inf_mr()
ggplot(data = gg_df, aes(x)) +
stat_function(fun = y0, color = purple, size = 1, xlim = c(-1,0)) +
stat_function(
fun = function(x) {y0(x) + 0.2},
color = purple, size = 1, xlim = c(0,1)
) +
stat_function(fun = y1, color = red_pink, size = 1) +
scale_x_continuous(
"Own-party margin of victory",
lim = c(-1,1),
labels = scales::percent_format(accuracy = 1)
) +
scale_y_continuous(
"Probability of winning next election",
lim = c(0,1),
labels = scales::percent_format(accuracy = 1)
) +
theme_pander(base_size = 20, base_family = "Fira Sans Book")
ggplot(data = gg_df, aes(x)) +
stat_function(fun = y0, color = purple, size = 1, xlim = c(-1,0)) +
stat_function(
fun = function(x) {y0(x) + 0.15},
color = purple, size = 1, xlim = c(0,1)
) +
stat_function(fun = y1, color = red_pink, size = 1) +
scale_x_continuous(
"Own-party margin of victory",
lim = c(-1,1),
labels = scales::percent_format(accuracy = 1)
) +
scale_y_continuous(
"Probability of winning next election",
lim = c(0,1),
labels = scales::percent_format(accuracy = 1)
) +
theme_pander(base_size = 20, base_family = "Fira Sans Book")
xaringan:::inf_mr()
source("~/Dropbox/Research/MyProjects/Miscellaneous/CodeR/wordMaker.R")
word_maker("weai")
rm(list = ls())
xaringan:::inf_mr()
set.seed(12345)
n <- 10
tibble(x = 1:n, y = 1 + x + rnorm(n))
sample_n(true_df, size = n, replace = T)
true_df <- tibble(x = 1:n, y = 1 + x + rnorm(n))
df
lm(y ~ x, data = z)$coefficient
n = 10
z = tibble(x = 1:n, y = 1 + x + rnorm(n))
b = lm(y ~ x, data = z)$coefficient
lm(y ~ x, data = z)$coefficient
lm(y ~ x, data = z)$coefficient[1]
lm(y ~ x, data = z)$coefficient[2]
sample
sample(1:10, 10,)
sample(1:10, 10)
sample(1:10, 10, replace = T)
s1 <- sample(1:10, 10, replace = T)
z1 <- z[s1,]
z1
viridis_pal()
viridis_pal(10)
magma(10)
boot_colors <- magma(n, begin = 0.1, end = 0.9)
boot_colors
ggplot(data = tibble(x = 1, y = 1:n), aes(x, y, fill = as.factor(y))) +
geom_tile(color = "black", size = 0.1)
ggplot(
data = base_df %>% mutate(s = s1),
aes(x, y, fill = as.factor(s1))
) +
geom_tile(color = "black", size = 1) +
coord_equal() +
scale_fill_manual(values = boot_colors[s1]) +
theme_void() +
theme(legend.position = "none")
s1
xaringan:::inf_mr()
z1 %>% mutate(s = s1)
xaringan:::inf_mr()
?geom_label
s2
>as.factor(x = x, x)
?as.factor()
?boot
??boot
boot_v
boot_v
boot_v
rm(boot_v)
boot_df
lm(y ~ x, z)$coefficient
lm(y ~ x, z)$coefficient %>% class()
lm(y ~ x, z)$coefficient %>% as_tibble
lm(y ~ x, z)$coefficient %>% as.data.frame()
lm(y ~ x, z)$coefficient %>% t
lm(y ~ x, z)$coefficient %>% t %>% as_tibble
boot_df
lm(y ~ x, z)$coefficient %>% t %>% data_frame()
lm(y ~ x, z)$coefficient %>% t %>% as_data_frame()
lm(y ~ x, z)$coefficient %>% t %>% as_tibble()
lm(y ~ x, z)$coefficient %>% t %>% data.frame
boot_df
lm(y ~ x, z)$coefficient
replicate(10, lm(y ~ x, z)$coefficient)
replicate(10, lm(y ~ x, z)$coefficient, simplify = F)
replicate(10, lm(y ~ x, z)$coefficient, simplify = F) %>% bind_rows()
lm(y ~ x, z)
lm(y ~ x, z) %>% tidy()
lm(y ~ x, z) %>% tidy() %>% extract2(1:2,1)
lm(y ~ x, z) %>% tidy() %>% extract2(,1)
lm(y ~ x, z) %>% tidy() %>% extract2(1)
lm(y ~ x, z) %>% tidy() %>% extract2(2)
lm(y ~ x, z) %>% tidy() %>% extract(2)
lm(y ~ x, z) %>% tidy() %>% extract(1,2)
est <- lm(y ~ x, data = z[sample(1:n, n, replace = T), ]) %>% tidy()
est
tibble(int = est[1,2], coef = est[2,2])
tibble(int = est[1,2], coef = est[2,2])
data.frame(int = est[1,2], coef = est[2,2])
est[1,2]
est <- lm(y ~ x, data = z[sample(1:n, n, replace = T), ])
est
est[1]
est$coefficients[1]
?geom_abline
boo_df
boot_df
boot_df[1,1]
boot_df[1,1] %>% class
boot_df[1,2] %>% class
z
z
z
boot_df[1:20,]
sd(boot_df$coef)
sd(boot_df$coef)
?sd
?avr
var(boot_df$coef * (1e4-1)/(1e4))
var(boot_df$coef)
var(boot_df$coef) %>% sqrt
var(boot_df$coef * (1e4-1)/(1e4)) %>% sqrt
lm(y~x,z) %>% names
tidy(lm(y~x,z))[2,3]
tidy(lm(y~x,z))[2,3] %>% as.numeric()
xaringan:::inf_mr()
factorial(4)
factorial(4)^2
factorial(8)
factorial(4)^2/factorial(8)
1/70
choose(8,4)
choose(8,4)
1/70
choose(50,25)
xaringan::inf_mr('11-randomization.Rmd')
ci_sum
random_df
ci_df
ci_sum
ci_sum <- ci_df %>% mutate(
reject = 2 * pt(abs((est - est_ols[2,"estimate"])/se), df = 720, lower.tail = F) < 0.05
)
ci_sum
ci_sum$reject %>% mean
ci_sum %<>% group_by(null_group) %>%
summarize(
reject = mean(reject),
null = first(null)
)
ci_sum
est
est_ols
View(ci_sum)
ci_sum <- ci_df %>% mutate(
reject = abs((est - est_ols[2,"estimate"])/se) > qt(0.975, df = 720)
)
ci_sum %<>% group_by(null_group) %>%
summarize(
reject = mean(reject),
null = first(null)
)
ci_sum
ci_sum %>% summary
ci_sum %>% summary
ci_df
ci_sum %>% summary
ci_sum
ci_sum %>% View
ci_df
ci_df %>% filter(group == 51)
ci_df %>% filter(null_group == 51)
ci_df %>% filter(null_group == 51)
est_ols[2,"estimate"]
est_ols
ci_sum <- ci_df %>% mutate(
reject = abs((est - est_ols[2,"estimate"])/se) > qt(0.975, df = 720)
)
ci_sum %>% filter(null_group == 51)
ci_sum %>% filter(null_group == 51) %$%reject %>% mean
ci_sum
ci_sum %>% filter(reject < 0.1)
886.3 - 2 * 488.2
seq(from = est_ols[2,"conf.low"], to = est_ols[2,"conf.high"], length.out = 100)
est_ols
seq(
from = est_ols[2,"estimate"] - 4 * est_ols[2,"std.error"],
to = est_ols[2,"estimate"] + 4 * est_ols[2,"std.error"],
length.out = 100)
)
seq(
from = est_ols[2,"estimate"] - 4 * est_ols[2,"std.error"],
to = est_ols[2,"estimate"] + 4 * est_ols[2,"std.error"],
length.out = 100)
)
seq(
from = est_ols[2,"estimate"] - 4 * est_ols[2,"std.error"],
to = est_ols[2,"estimate"] + 4 * est_ols[2,"std.error"],
length.out = 100)
)
seq(
from = est_ols[2,"estimate"] - 4 * est_ols[2,"std.error"],
to = est_ols[2,"estimate"] + 4 * est_ols[2,"std.error"],
length.out = 100
) %>% list()
seq(
from = est_ols[2,"estimate"] - 3 * est_ols[2,"std.error"],
to = est_ols[2,"estimate"] + 3 * est_ols[2,"std.error"],
length.out = 100
) %>% list()
ist(seq(
from = est_ols[2,"estimate"] - 3 * est_ols[2,"std.error"],
to = est_ols[2,"estimate"] + 3 * est_ols[2,"std.error"],
length.out = 100
))
list(seq(
from = est_ols[2,"estimate"] - 3 * est_ols[2,"std.error"],
to = est_ols[2,"estimate"] + 3 * est_ols[2,"std.error"],
length.out = 100
))
?geom_segment
ci_sum
ci_sum %>% filter(reject < 0.95)
ci_sum %>% filter(reject < 0.95) %$% null
ci_sum %>% filter(reject < 0.95)
ci_sum %>% filter(reject < 0.95) %$% null
ci_sum %>% filter(reject < 0.95) %$% null %>% range()
ci_sum %>% filter(reject < 0.95) %$% null %>% range() %>% head(1)
pagedown::chrome_print("10-clustering.html", output = "11-randomization-nopause.pdf")
pagedown::chrome_print("1-randomization.html", output = "11-randomization-nopause.pdf")
pagedown::chrome_print("11-randomization.html", output = "11-randomization-nopause.pdf")
pagedown::chrome_print("11-randomization.html", output = "11-randomization.pdf")
xaringan::inf_mr('11-randomization.Rmd')
pagedown::chrome_print("11-randomization.html", output = "11-randomization-nopause.pdf")
pagedown::chrome_print("11-randomization.html", output = "11-randomization.pdf")
xaringan::inf_mr('12-ml.Rmd')
xaringan::inf_mr('12-ml.Rmd')
xaringan::inf_mr('12-ml.Rmd')
xaringan::inf_mr('12-ml.Rmd')
here()
here("other-files/")
here("other-files/") %>% dir
here("other-files/", "flex-sim.rds")
here("other-files", "flex-sim.rds") %>% file.exists()
pagedown::chrome_print("12-ml.html", output = "12-ml-nopause.pdf")
pagedown::chrome_print("12-ml.html", output = "12-ml.pdf")
pagedown::chrome_print("12-ml.html", output = "12-ml-nopause.pdf")
pagedown::chrome_print("12-ml.html", output = "12-ml.pdf")
